# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    architecture                                       :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: adubugra <marvin@42.fr>                    +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2018/04/16 14:59:38 by adubugra          #+#    #+#              #
#    Updated: 2018/04/16 21:17:42 by adubugra         ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

This project will make you sort data on a stack, with a limited set of instructions, using
the lowest possible number of actions. To succeed youâ€™ll have to manipulate various
types of algorithms and choose the one (of many) most appropriate solution for an
optimized data sorting

Two programs:

Checker: 

Push_swap: 
	you have 2 stacks, a and b
	b is initially empty, and a contains a random number


Rules:
- Checker takes the initial stack as arguments. First argument is top of stack
- Checker does nothing if no arguments
- Checker then opens stdin and takes the commands
- After executing commands, checks if the stack is ordered, true: OK\n, false: KO\n
- If error of any type, display error on stderr. Eg: arguments are not integer, duplicates, bigger than int, instruction doesnt exist

To do list:
- Take stack in arguments OK
- Build stack and functions (push pop empty) OK
- Check if arguments are all proper ints OK
- Add arguments to the stack OK
- Build sorting operation functions OK
- Add commands to a queue OK
- Execute commands OK
- Check if stack a is sorted and b empty OK
- check if repeated number during sort
- Build sorting functions that display the commands
- Free properly in case of error
- Create hash table to speed repeated check




